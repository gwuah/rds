// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/deployment.proto

package protov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/gwuah/rds/api/gen/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ManagerServiceName is the fully-qualified name of the ManagerService service.
	ManagerServiceName = "proto.v1.ManagerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagerServiceCreateDeploymentProcedure is the fully-qualified name of the ManagerService's
	// CreateDeployment RPC.
	ManagerServiceCreateDeploymentProcedure = "/proto.v1.ManagerService/CreateDeployment"
	// ManagerServiceGetDeploymentProcedure is the fully-qualified name of the ManagerService's
	// GetDeployment RPC.
	ManagerServiceGetDeploymentProcedure = "/proto.v1.ManagerService/GetDeployment"
	// ManagerServiceStopDeploymentProcedure is the fully-qualified name of the ManagerService's
	// StopDeployment RPC.
	ManagerServiceStopDeploymentProcedure = "/proto.v1.ManagerService/StopDeployment"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	managerServiceServiceDescriptor                = v1.File_proto_v1_deployment_proto.Services().ByName("ManagerService")
	managerServiceCreateDeploymentMethodDescriptor = managerServiceServiceDescriptor.Methods().ByName("CreateDeployment")
	managerServiceGetDeploymentMethodDescriptor    = managerServiceServiceDescriptor.Methods().ByName("GetDeployment")
	managerServiceStopDeploymentMethodDescriptor   = managerServiceServiceDescriptor.Methods().ByName("StopDeployment")
)

// ManagerServiceClient is a client for the proto.v1.ManagerService service.
type ManagerServiceClient interface {
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	StopDeployment(context.Context, *connect.Request[v1.StopDeploymentRequest]) (*connect.Response[v1.StopDeploymentResponse], error)
}

// NewManagerServiceClient constructs a client for the proto.v1.ManagerService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ManagerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managerServiceClient{
		createDeployment: connect.NewClient[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse](
			httpClient,
			baseURL+ManagerServiceCreateDeploymentProcedure,
			connect.WithSchema(managerServiceCreateDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDeployment: connect.NewClient[v1.GetDeploymentRequest, v1.GetDeploymentResponse](
			httpClient,
			baseURL+ManagerServiceGetDeploymentProcedure,
			connect.WithSchema(managerServiceGetDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stopDeployment: connect.NewClient[v1.StopDeploymentRequest, v1.StopDeploymentResponse](
			httpClient,
			baseURL+ManagerServiceStopDeploymentProcedure,
			connect.WithSchema(managerServiceStopDeploymentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// managerServiceClient implements ManagerServiceClient.
type managerServiceClient struct {
	createDeployment *connect.Client[v1.CreateDeploymentRequest, v1.CreateDeploymentResponse]
	getDeployment    *connect.Client[v1.GetDeploymentRequest, v1.GetDeploymentResponse]
	stopDeployment   *connect.Client[v1.StopDeploymentRequest, v1.StopDeploymentResponse]
}

// CreateDeployment calls proto.v1.ManagerService.CreateDeployment.
func (c *managerServiceClient) CreateDeployment(ctx context.Context, req *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return c.createDeployment.CallUnary(ctx, req)
}

// GetDeployment calls proto.v1.ManagerService.GetDeployment.
func (c *managerServiceClient) GetDeployment(ctx context.Context, req *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return c.getDeployment.CallUnary(ctx, req)
}

// StopDeployment calls proto.v1.ManagerService.StopDeployment.
func (c *managerServiceClient) StopDeployment(ctx context.Context, req *connect.Request[v1.StopDeploymentRequest]) (*connect.Response[v1.StopDeploymentResponse], error) {
	return c.stopDeployment.CallUnary(ctx, req)
}

// ManagerServiceHandler is an implementation of the proto.v1.ManagerService service.
type ManagerServiceHandler interface {
	CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error)
	GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error)
	StopDeployment(context.Context, *connect.Request[v1.StopDeploymentRequest]) (*connect.Response[v1.StopDeploymentResponse], error)
}

// NewManagerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagerServiceHandler(svc ManagerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	managerServiceCreateDeploymentHandler := connect.NewUnaryHandler(
		ManagerServiceCreateDeploymentProcedure,
		svc.CreateDeployment,
		connect.WithSchema(managerServiceCreateDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managerServiceGetDeploymentHandler := connect.NewUnaryHandler(
		ManagerServiceGetDeploymentProcedure,
		svc.GetDeployment,
		connect.WithSchema(managerServiceGetDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	managerServiceStopDeploymentHandler := connect.NewUnaryHandler(
		ManagerServiceStopDeploymentProcedure,
		svc.StopDeployment,
		connect.WithSchema(managerServiceStopDeploymentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.ManagerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagerServiceCreateDeploymentProcedure:
			managerServiceCreateDeploymentHandler.ServeHTTP(w, r)
		case ManagerServiceGetDeploymentProcedure:
			managerServiceGetDeploymentHandler.ServeHTTP(w, r)
		case ManagerServiceStopDeploymentProcedure:
			managerServiceStopDeploymentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagerServiceHandler struct{}

func (UnimplementedManagerServiceHandler) CreateDeployment(context.Context, *connect.Request[v1.CreateDeploymentRequest]) (*connect.Response[v1.CreateDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.ManagerService.CreateDeployment is not implemented"))
}

func (UnimplementedManagerServiceHandler) GetDeployment(context.Context, *connect.Request[v1.GetDeploymentRequest]) (*connect.Response[v1.GetDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.ManagerService.GetDeployment is not implemented"))
}

func (UnimplementedManagerServiceHandler) StopDeployment(context.Context, *connect.Request[v1.StopDeploymentRequest]) (*connect.Response[v1.StopDeploymentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.ManagerService.StopDeployment is not implemented"))
}
